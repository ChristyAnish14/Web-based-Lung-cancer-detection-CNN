import tensorflow as tf
import cv2
import os
from PIL import Image
import numpy as np
from numpy import asarray
from sklearn.model_selection import train_test_split
from tensorflow import keras
from keras.utils import normalize
from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D,Activation,Dropout,Flatten,Dense
from sklearn.utils import shuffle
from tensorflow.keras import models
from keras.utils import to_categorical
import matplotlib.pyplot as plt
from keras.callbacks import History

image_directory = '/content/drive/MyDrive/Lungcancer Detection/CT-Scan Images'
tumour_images = os.listdir('/content/drive/MyDrive/Lungcancer Detection/CT-Scan Images/Cancerous raw images-jpg')
no_tumour_images = os.listdir('/content/drive/MyDrive/Lungcancer Detection/CT-Scan Images/Non-Cancerous raw images - jpg')
dataset=[]
label=[]
INPUT_SIZE = 64
print(tumour_images)

print(no_tumour_images)
#Iterating through all the images in the cancerous raw images and non-cancerous raw images folders

for i, image_name in enumerate(tumour_images):
   if(image_name.split('.')[1]=='jpg'):
       image=cv2.imread('/content/drive/MyDrive/Lungcancer Detection/CT-Scan Images/Cancerous raw images-jpg/'
       +image_name)
       image=Image.fromarray(image, 'RGB')#converting the image to an array
       image=image.resize((INPUT_SIZE,INPUT_SIZE)) # Resizing the image
       dataset.append(np.array(image))#appending the dataset in numpy array format
       label.append(1) #Has lung cancer

for i, image_name in enumerate(no_tumour_images):
   if(image_name.split('.')[1]=='jpg'):
       image=cv2.imread('/content/drive/MyDrive/Lungcancer Detection/CT-Scan Images/Non-Cancerous raw images - jpg/'
                        +image_name)
       image=Image.fromarray(image,'RGB') #converting the image to an array
       image=image.resize((INPUT_SIZE,INPUT_SIZE)) # Resizing the image
       dataset.append(np.array(image))#appending the dataset in numpy array format
       label.append(0) #Has no lung cancer

print(dataset)
print(label)
print(len(dataset))
print(len(label))

#image is converted to array
dataset = np.array(dataset)
label = np.array(label)

#Splitting data into test and train

x_train,x_test,y_train,y_test = train_test_split(dataset,label,test_size=0.3,random_state=0)
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

x_train = normalize(x_train,axis=1)
x_test = normalize(x_test,axis=1)


model = Sequential()

#Adding the first layer

model.add(Conv2D(32,(3,3),input_shape=(INPUT_SIZE,INPUT_SIZE,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(32,(3,3),kernel_initializer='he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3),kernel_initializer='he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
history = History()
model.fit(x_train,y_train,batch_size=16,verbose=1,epochs=10,validation_data=(x_test,y_test),shuffle=False,callbacks=[history])

#model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=10, callbacks=[history])

# Plot training & validation accuracy values
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.savefig('/content/drive/MyDrive/Lungcancer Detection/static/accuracy_plot.png')  # Save plot as image
plt.show()
plt.close()  # Close the figure

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.savefig('/content/drive/MyDrive/Lungcancer Detection/static/loss_plot.png')  # Save plot as image
plt.show()
plt.close()  # Close the figure

model.save('/content/drive/MyDrive/Lungcancer Detection/My_model')
